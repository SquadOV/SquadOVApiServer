{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2","program":"C:\\Users\\Michael Bao\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","atoi","--edition=2018","C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=38c6e067cc836ad5","-C","extra-filename=-38c6e067cc836ad5","--out-dir","a:\\Git\\SquadOVApiServer\\deps\\cargo\\sqlx\\target\\rls\\debug\\deps","-L","dependency=a:\\Git\\SquadOVApiServer\\deps\\cargo\\sqlx\\target\\rls\\debug\\deps","--extern","num_traits=a:\\Git\\SquadOVApiServer\\deps\\cargo\\sqlx\\target\\rls\\debug\\deps\\libnum_traits-a648c4cff8fc7ebb.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Michael Bao\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"a:\\Git\\SquadOVApiServer\\deps\\cargo\\sqlx\\target\\rls\\debug\\deps\\libatoi-38c6e067cc836ad5.rmeta"},"prelude":{"crate_id":{"name":"atoi","disambiguator":[5119014214724823732,937400057829465982]},"crate_root":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src","external_crates":[{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[15394396593765937133,15104794829170053384]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14223085168939843507,9453778982390123811]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10495964697894269666,7444397110794681726]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5630579929119936438,10747952327389013202]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[755004289757070725,4528322009891643596]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12293211462733931105,3605749939090106910]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14880717690889174640,9014378682587101436]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1733233879246965746,6308927592973156139]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2578852399168599952,875302055328020592]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15050766551219055192,6843698544963456792]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14716868785672998615,14481457355720881040]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[7183069464598737283,14932178614966804545]}},{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","num":13,"id":{"name":"num_traits","disambiguator":[3050510285007202109,9225315261191733243]}}],"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":0,"byte_end":15499,"line_start":1,"line_end":445,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":0,"byte_end":15499,"line_start":1,"line_end":445,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":58},{"krate":0,"index":72},{"krate":0,"index":71},{"krate":0,"index":69},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":52},{"krate":0,"index":56}],"decl_id":null,"docs":" A crate for parsing integers directly form ASCII (`[u8]`) without encoding them into utf8\n first. The name is inspired by the famous C function.","sig":null,"attributes":[{"value":"/ A crate for parsing integers directly form ASCII (`[u8]`) without encoding them into utf8","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":0,"byte_end":93,"line_start":1,"line_end":1,"column_start":1,"column_end":94}},{"value":"/ first. The name is inspired by the famous C function.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":94,"byte_end":151,"line_start":2,"line_end":2,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":152,"byte_end":155,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Using `str::from_utf8` and `str::parse`","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":156,"byte_end":199,"line_start":4,"line_end":4,"column_start":1,"column_end":44}},{"value":"/ is likely to be more idiomatic. Use this crate if you want to avoid decoding bytes into utf8","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":200,"byte_end":296,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"/ (e.g. for performance reasons).","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":297,"byte_end":332,"line_start":6,"line_end":6,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":333,"byte_end":336,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Note that if you want to know how much of the input has been used, you can use the","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":337,"byte_end":423,"line_start":8,"line_end":8,"column_start":1,"column_end":87}},{"value":"/ `FromRadix10` trait, for example:","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":424,"byte_end":461,"line_start":9,"line_end":9,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":462,"byte_end":465,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":466,"byte_end":477,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ use atoi::FromRadix10;","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":478,"byte_end":504,"line_start":12,"line_end":12,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":505,"byte_end":508,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ /// Return the parsed integer and remaining slice if successful.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":509,"byte_end":577,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"/ fn atoi_with_rest<I: FromRadix10>(text: &[u8]) -> ((&[u8], Option<I>)) {","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":578,"byte_end":654,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/     match I::from_radix_10(text) {","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":655,"byte_end":693,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/         (_, 0) => (text, None),","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":694,"byte_end":729,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/         (n, used) => (&text[used..], Some(n)),","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":730,"byte_end":780,"line_start":18,"line_end":18,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":781,"byte_end":790,"line_start":19,"line_end":19,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":791,"byte_end":796,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":797,"byte_end":804,"line_start":21,"line_end":21,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2186,"byte_end":2190,"line_start":61,"line_end":61,"column_start":8,"column_end":12},"name":"atoi","qualname":"::atoi","value":"pub fn atoi<I>(&[u8]) -> Option<I> where I: FromRadix10Checked","parent":null,"children":[],"decl_id":null,"docs":" Parses an integer from a slice.","sig":null,"attributes":[{"value":"/ Parses an integer from a slice.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":976,"byte_end":1011,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1012,"byte_end":1015,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Contrary to its 'C' counterpart atoi is generic and will require a type argument if the type","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1016,"byte_end":1112,"line_start":34,"line_end":34,"column_start":1,"column_end":97}},{"value":"/ inference can not determine its result.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1113,"byte_end":1156,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1157,"byte_end":1160,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1161,"byte_end":1174,"line_start":37,"line_end":37,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1175,"byte_end":1178,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1179,"byte_end":1186,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ use atoi::atoi;","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1187,"byte_end":1206,"line_start":40,"line_end":40,"column_start":1,"column_end":20}},{"value":"/ // Parsing to digits from a slice","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1207,"byte_end":1244,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(Some(42), atoi::<u32>(b\"42\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1245,"byte_end":1290,"line_start":42,"line_end":42,"column_start":1,"column_end":46}},{"value":"/ // Additional bytes after the number are ignored. If you want to know how many bytes were used","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1291,"byte_end":1389,"line_start":43,"line_end":43,"column_start":1,"column_end":99}},{"value":"/ // to parse the number use `FromRadix10::from_radix_10`.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1390,"byte_end":1450,"line_start":44,"line_end":44,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(Some(42), atoi::<u32>(b\"42 is the answer to life, the universe and everything\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1451,"byte_end":1547,"line_start":45,"line_end":45,"column_start":1,"column_end":97}},{"value":"/ // `None` is returned if the slice does not start with a digit","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1548,"byte_end":1614,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(None, atoi::<u32>(b\"Sadly we do not know the question\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1615,"byte_end":1687,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"/ // While signed integer types are supported...","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1688,"byte_end":1738,"line_start":48,"line_end":48,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(Some(42), atoi::<i32>(b\"42\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1739,"byte_end":1784,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"/ // ... signs currently are not (subject to change in future versions)","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1785,"byte_end":1858,"line_start":50,"line_end":50,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(None, atoi::<i32>(b\"-42\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1859,"byte_end":1901,"line_start":51,"line_end":51,"column_start":1,"column_end":43}},{"value":"/ // Leading zeros are allowed","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1902,"byte_end":1934,"line_start":52,"line_end":52,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(Some(42), atoi::<u32>(b\"0042\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1935,"byte_end":1982,"line_start":53,"line_end":53,"column_start":1,"column_end":48}},{"value":"/ // Overflows will return `None`","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":1983,"byte_end":2018,"line_start":54,"line_end":54,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(None, atoi::<u8>(b\"256\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2019,"byte_end":2060,"line_start":55,"line_end":55,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2061,"byte_end":2068,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2069,"byte_end":2072,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # Return","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2073,"byte_end":2085,"line_start":58,"line_end":58,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2086,"byte_end":2089,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Returns a a number if the slice started with a number, otherwise `None` is returned.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2090,"byte_end":2178,"line_start":60,"line_end":60,"column_start":1,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2481,"byte_end":2492,"line_start":72,"line_end":72,"column_start":11,"column_end":22},"name":"FromRadix10","qualname":"::FromRadix10","value":"FromRadix10: Sized","parent":null,"children":[{"krate":0,"index":20}],"decl_id":null,"docs":" Types implementing this trait can be parsed from a positional numeral system with radix 10\n","sig":null,"attributes":[{"value":"/ Types implementing this trait can be parsed from a positional numeral system with radix 10","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2376,"byte_end":2470,"line_start":71,"line_end":71,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3651,"byte_end":3664,"line_start":98,"line_end":98,"column_start":8,"column_end":21},"name":"from_radix_10","qualname":"::FromRadix10::from_radix_10","value":"pub fn from_radix_10(&[u8]) -> (Self, usize)","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Parses an integer from a slice.","sig":null,"attributes":[{"value":"/ Parses an integer from a slice.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2506,"byte_end":2541,"line_start":73,"line_end":73,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2546,"byte_end":2549,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2554,"byte_end":2567,"line_start":75,"line_end":75,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2572,"byte_end":2575,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2580,"byte_end":2587,"line_start":77,"line_end":77,"column_start":5,"column_end":12}},{"value":"/ use atoi::FromRadix10;","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2592,"byte_end":2618,"line_start":78,"line_end":78,"column_start":5,"column_end":31}},{"value":"/ // Parsing to digits from a slice","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2623,"byte_end":2660,"line_start":79,"line_end":79,"column_start":5,"column_end":42}},{"value":"/ assert_eq!((42,2), u32::from_radix_10(b\"42\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2665,"byte_end":2715,"line_start":80,"line_end":80,"column_start":5,"column_end":55}},{"value":"/ // Additional bytes after the number are ignored","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2720,"byte_end":2772,"line_start":81,"line_end":81,"column_start":5,"column_end":57}},{"value":"/ assert_eq!((42,2), u32::from_radix_10(b\"42 is the answer to life, the universe and everything\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2777,"byte_end":2878,"line_start":82,"line_end":82,"column_start":5,"column_end":106}},{"value":"/ // (0,0) is returned if the slice does not start with a digit","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2883,"byte_end":2948,"line_start":83,"line_end":83,"column_start":5,"column_end":70}},{"value":"/ assert_eq!((0,0), u32::from_radix_10(b\"Sadly we do not know the question\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2953,"byte_end":3033,"line_start":84,"line_end":84,"column_start":5,"column_end":85}},{"value":"/ // While signed integer types are supported...","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3038,"byte_end":3088,"line_start":85,"line_end":85,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((42,2), i32::from_radix_10(b\"42\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3093,"byte_end":3143,"line_start":86,"line_end":86,"column_start":5,"column_end":55}},{"value":"/ // Signs are not allowed (even for signed integer types)","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3148,"byte_end":3208,"line_start":87,"line_end":87,"column_start":5,"column_end":65}},{"value":"/ assert_eq!((0,0), i32::from_radix_10(b\"-42\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3213,"byte_end":3263,"line_start":88,"line_end":88,"column_start":5,"column_end":55}},{"value":"/ // Leading zeros are allowed","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3268,"byte_end":3300,"line_start":89,"line_end":89,"column_start":5,"column_end":37}},{"value":"/ assert_eq!((42,4), u32::from_radix_10(b\"0042\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3305,"byte_end":3357,"line_start":90,"line_end":90,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3362,"byte_end":3369,"line_start":91,"line_end":91,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3374,"byte_end":3377,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3382,"byte_end":3394,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3399,"byte_end":3402,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Returns a tuple with two numbers. The first is the integer parsed or zero, the second is the","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3407,"byte_end":3503,"line_start":95,"line_end":95,"column_start":5,"column_end":101}},{"value":"/ index of the byte right after the parsed number. If the second element is zero the slice","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3508,"byte_end":3600,"line_start":96,"line_end":96,"column_start":5,"column_end":97}},{"value":"/ did not start with an ASCII digit.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3605,"byte_end":3643,"line_start":97,"line_end":97,"column_start":5,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3882,"byte_end":3900,"line_start":103,"line_end":103,"column_start":11,"column_end":29},"name":"FromRadix10Checked","qualname":"::FromRadix10Checked","value":"FromRadix10Checked: FromRadix10","parent":null,"children":[{"krate":0,"index":22}],"decl_id":null,"docs":" Types implementing this trait can be parsed from a positional numeral system with radix 10.\n Acts much like `FromRadix10`, but performs additional checks for overflows.\n","sig":null,"attributes":[{"value":"/ Types implementing this trait can be parsed from a positional numeral system with radix 10.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3696,"byte_end":3791,"line_start":101,"line_end":101,"column_start":1,"column_end":96}},{"value":"/ Acts much like `FromRadix10`, but performs additional checks for overflows.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3792,"byte_end":3871,"line_start":102,"line_end":102,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5378,"byte_end":5399,"line_start":132,"line_end":132,"column_start":8,"column_end":29},"name":"from_radix_10_checked","qualname":"::FromRadix10Checked::from_radix_10_checked","value":"pub fn from_radix_10_checked(&[u8]) -> (Option<Self>, usize)","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Parses an integer from a slice.","sig":null,"attributes":[{"value":"/ Parses an integer from a slice.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3920,"byte_end":3955,"line_start":104,"line_end":104,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3960,"byte_end":3963,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3968,"byte_end":3981,"line_start":106,"line_end":106,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3986,"byte_end":3989,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3994,"byte_end":4001,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"/ use atoi::FromRadix10Checked;","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4006,"byte_end":4039,"line_start":109,"line_end":109,"column_start":5,"column_end":38}},{"value":"/ // Parsing to digits from a slice","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4044,"byte_end":4081,"line_start":110,"line_end":110,"column_start":5,"column_end":42}},{"value":"/ assert_eq!((Some(42),2), u32::from_radix_10_checked(b\"42\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4086,"byte_end":4150,"line_start":111,"line_end":111,"column_start":5,"column_end":69}},{"value":"/ // Additional bytes after the number are ignored","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4155,"byte_end":4207,"line_start":112,"line_end":112,"column_start":5,"column_end":57}},{"value":"/ assert_eq!((Some(42),2), u32::from_radix_10_checked(b\"42 is the answer to life, the universe and everything\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4212,"byte_end":4327,"line_start":113,"line_end":113,"column_start":5,"column_end":120}},{"value":"/ // (0,0) is returned if the slice does not start with a digit","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4332,"byte_end":4397,"line_start":114,"line_end":114,"column_start":5,"column_end":70}},{"value":"/ assert_eq!((Some(0),0), u32::from_radix_10_checked(b\"Sadly we do not know the question\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4402,"byte_end":4496,"line_start":115,"line_end":115,"column_start":5,"column_end":99}},{"value":"/ // While signed integer types are supported...","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4501,"byte_end":4551,"line_start":116,"line_end":116,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((Some(42),2), i32::from_radix_10_checked(b\"42\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4556,"byte_end":4620,"line_start":117,"line_end":117,"column_start":5,"column_end":69}},{"value":"/ // Signs are not allowed (even for signed integer types)","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4625,"byte_end":4685,"line_start":118,"line_end":118,"column_start":5,"column_end":65}},{"value":"/ assert_eq!((Some(0),0), i32::from_radix_10_checked(b\"-42\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4690,"byte_end":4754,"line_start":119,"line_end":119,"column_start":5,"column_end":69}},{"value":"/ // Leading zeros are allowed","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4759,"byte_end":4791,"line_start":120,"line_end":120,"column_start":5,"column_end":37}},{"value":"/ assert_eq!((Some(42),4), u32::from_radix_10_checked(b\"0042\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4796,"byte_end":4862,"line_start":121,"line_end":121,"column_start":5,"column_end":71}},{"value":"/ // Overflow is indicated by `None`","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4867,"byte_end":4905,"line_start":122,"line_end":122,"column_start":5,"column_end":43}},{"value":"/ assert_eq!((None, 3), u8::from_radix_10_checked(b\"256\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4910,"byte_end":4971,"line_start":123,"line_end":123,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4976,"byte_end":4983,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4988,"byte_end":4991,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":4996,"byte_end":5008,"line_start":126,"line_end":126,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5013,"byte_end":5016,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Returns a tuple with two numbers. The first is the integer parsed or zero if no digit has","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5021,"byte_end":5114,"line_start":128,"line_end":128,"column_start":5,"column_end":98}},{"value":"/ been found. None, if there were too many, or too high dighits and the parsing overflowed.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5119,"byte_end":5212,"line_start":129,"line_end":129,"column_start":5,"column_end":98}},{"value":"/ The second is the index of the byte right after the parsed number. If the second element is","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5217,"byte_end":5312,"line_start":130,"line_end":130,"column_start":5,"column_end":100}},{"value":"/ zero the slice did not start with an ASCII digit.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5317,"byte_end":5370,"line_start":131,"line_end":131,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5544,"byte_end":5555,"line_start":136,"line_end":136,"column_start":11,"column_end":22},"name":"FromRadix16","qualname":"::FromRadix16","value":"FromRadix16: Sized","parent":null,"children":[{"krate":0,"index":24}],"decl_id":null,"docs":" Types implementing this trait can be parsed from a positional numeral system with radix 16\n","sig":null,"attributes":[{"value":"/ Types implementing this trait can be parsed from a positional numeral system with radix 16","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5439,"byte_end":5533,"line_start":135,"line_end":135,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6807,"byte_end":6820,"line_start":164,"line_end":164,"column_start":8,"column_end":21},"name":"from_radix_16","qualname":"::FromRadix16::from_radix_16","value":"pub fn from_radix_16(&[u8]) -> (Self, usize)","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Parses an integer from a slice.","sig":null,"attributes":[{"value":"/ Parses an integer from a slice.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5569,"byte_end":5604,"line_start":137,"line_end":137,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5609,"byte_end":5612,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5617,"byte_end":5630,"line_start":139,"line_end":139,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5635,"byte_end":5638,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5643,"byte_end":5650,"line_start":141,"line_end":141,"column_start":5,"column_end":12}},{"value":"/ use atoi::FromRadix16;","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5655,"byte_end":5681,"line_start":142,"line_end":142,"column_start":5,"column_end":31}},{"value":"/ // Parsing to digits from a slice","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5686,"byte_end":5723,"line_start":143,"line_end":143,"column_start":5,"column_end":42}},{"value":"/ assert_eq!((42,2), u32::from_radix_16(b\"2a\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5728,"byte_end":5778,"line_start":144,"line_end":144,"column_start":5,"column_end":55}},{"value":"/ // Additional bytes after the number are ignored","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5783,"byte_end":5835,"line_start":145,"line_end":145,"column_start":5,"column_end":57}},{"value":"/ assert_eq!((42,2), u32::from_radix_16(b\"2a is the answer to life, the universe and everything\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5840,"byte_end":5941,"line_start":146,"line_end":146,"column_start":5,"column_end":106}},{"value":"/ // (0,0) is returned if the slice does not start with a digit","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5946,"byte_end":6011,"line_start":147,"line_end":147,"column_start":5,"column_end":70}},{"value":"/ assert_eq!((0,0), u32::from_radix_16(b\"Sadly we do not know the question\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6016,"byte_end":6096,"line_start":148,"line_end":148,"column_start":5,"column_end":85}},{"value":"/ // While signed integer types are supported...","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6101,"byte_end":6151,"line_start":149,"line_end":149,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((42,2), i32::from_radix_16(b\"2a\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6156,"byte_end":6206,"line_start":150,"line_end":150,"column_start":5,"column_end":55}},{"value":"/ // Signs are not allowed (even for signed integer types)","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6211,"byte_end":6271,"line_start":151,"line_end":151,"column_start":5,"column_end":65}},{"value":"/ assert_eq!((0,0), i32::from_radix_16(b\"-2a\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6276,"byte_end":6326,"line_start":152,"line_end":152,"column_start":5,"column_end":55}},{"value":"/ // Leading zeros are allowed","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6331,"byte_end":6363,"line_start":153,"line_end":153,"column_start":5,"column_end":37}},{"value":"/ assert_eq!((42,4), u32::from_radix_16(b\"002a\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6368,"byte_end":6420,"line_start":154,"line_end":154,"column_start":5,"column_end":57}},{"value":"/ // so are uppercase letters","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6425,"byte_end":6456,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/ assert_eq!((42,4), u32::from_radix_16(b\"002A\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6461,"byte_end":6513,"line_start":156,"line_end":156,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6518,"byte_end":6525,"line_start":157,"line_end":157,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6530,"byte_end":6533,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6538,"byte_end":6550,"line_start":159,"line_end":159,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6555,"byte_end":6558,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Returns a tuple with two numbers. The first is the integer parsed or zero, the second is the","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6563,"byte_end":6659,"line_start":161,"line_end":161,"column_start":5,"column_end":101}},{"value":"/ index of the byte right after the parsed number. If the second element is zero the slice","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6664,"byte_end":6756,"line_start":162,"line_end":162,"column_start":5,"column_end":97}},{"value":"/ did not start with an ASCII digit.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6761,"byte_end":6799,"line_start":163,"line_end":163,"column_start":5,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7038,"byte_end":7056,"line_start":169,"line_end":169,"column_start":11,"column_end":29},"name":"FromRadix16Checked","qualname":"::FromRadix16Checked","value":"FromRadix16Checked: FromRadix16","parent":null,"children":[{"krate":0,"index":26}],"decl_id":null,"docs":" Types implementing this trait can be parsed from a positional numeral system with radix 10.\n Acts much like `FromRadix10`, but performs additional checks for overflows.\n","sig":null,"attributes":[{"value":"/ Types implementing this trait can be parsed from a positional numeral system with radix 10.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6852,"byte_end":6947,"line_start":167,"line_end":167,"column_start":1,"column_end":96}},{"value":"/ Acts much like `FromRadix10`, but performs additional checks for overflows.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":6948,"byte_end":7027,"line_start":168,"line_end":168,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8539,"byte_end":8560,"line_start":199,"line_end":199,"column_start":8,"column_end":29},"name":"from_radix_16_checked","qualname":"::FromRadix16Checked::from_radix_16_checked","value":"pub fn from_radix_16_checked(&[u8]) -> (Option<Self>, usize)","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Parses an integer from a slice.","sig":null,"attributes":[{"value":"/ Parses an integer from a slice.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7076,"byte_end":7111,"line_start":170,"line_end":170,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7116,"byte_end":7119,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7124,"byte_end":7137,"line_start":172,"line_end":172,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7142,"byte_end":7145,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7150,"byte_end":7157,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"/ use atoi::FromRadix16Checked;","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7162,"byte_end":7195,"line_start":175,"line_end":175,"column_start":5,"column_end":38}},{"value":"/ // Parsing to digits from a slice","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7200,"byte_end":7237,"line_start":176,"line_end":176,"column_start":5,"column_end":42}},{"value":"/ assert_eq!((Some(42),2), u32::from_radix_16_checked(b\"2a\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7242,"byte_end":7306,"line_start":177,"line_end":177,"column_start":5,"column_end":69}},{"value":"/ // Additional bytes after the number are ignored","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7311,"byte_end":7363,"line_start":178,"line_end":178,"column_start":5,"column_end":57}},{"value":"/ assert_eq!((Some(42),2), u32::from_radix_16_checked(b\"2a is the answer to life, the \\","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7368,"byte_end":7457,"line_start":179,"line_end":179,"column_start":5,"column_end":94}},{"value":"/ universe and everything\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7462,"byte_end":7493,"line_start":180,"line_end":180,"column_start":5,"column_end":36}},{"value":"/ // (0,0) is returned if the slice does not start with a digit","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7498,"byte_end":7563,"line_start":181,"line_end":181,"column_start":5,"column_end":70}},{"value":"/ assert_eq!((Some(0),0), u32::from_radix_16_checked(b\"Sadly we do not know the question\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7568,"byte_end":7662,"line_start":182,"line_end":182,"column_start":5,"column_end":99}},{"value":"/ // While signed integer types are supported...","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7667,"byte_end":7717,"line_start":183,"line_end":183,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((Some(42),2), i32::from_radix_16_checked(b\"2a\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7722,"byte_end":7786,"line_start":184,"line_end":184,"column_start":5,"column_end":69}},{"value":"/ // Signs are not allowed (even for signed integer types)","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7791,"byte_end":7851,"line_start":185,"line_end":185,"column_start":5,"column_end":65}},{"value":"/ assert_eq!((Some(0),0), i32::from_radix_16_checked(b\"-2a\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7856,"byte_end":7920,"line_start":186,"line_end":186,"column_start":5,"column_end":69}},{"value":"/ // Leading zeros are allowed","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7925,"byte_end":7957,"line_start":187,"line_end":187,"column_start":5,"column_end":37}},{"value":"/ assert_eq!((Some(42),4), u32::from_radix_16_checked(b\"002a\"));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7962,"byte_end":8028,"line_start":188,"line_end":188,"column_start":5,"column_end":71}},{"value":"/ // So are uppercase letters","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8033,"byte_end":8064,"line_start":189,"line_end":189,"column_start":5,"column_end":36}},{"value":"/ assert_eq!((Some(42),2), u32::from_radix_16_checked(b\"2A\"))","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8069,"byte_end":8132,"line_start":190,"line_end":190,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8137,"byte_end":8144,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8149,"byte_end":8152,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8157,"byte_end":8169,"line_start":193,"line_end":193,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8174,"byte_end":8177,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Returns a tuple with two numbers. The first is the integer parsed or zero if no digit has","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8182,"byte_end":8275,"line_start":195,"line_end":195,"column_start":5,"column_end":98}},{"value":"/ been found. None, if there were too many, or too high dighits and the parsing overflowed.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8280,"byte_end":8373,"line_start":196,"line_end":196,"column_start":5,"column_end":98}},{"value":"/ The second is the index of the byte right after the parsed number. If the second element is","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8378,"byte_end":8473,"line_start":197,"line_end":197,"column_start":5,"column_end":100}},{"value":"/ zero the slice did not start with an ASCII digit.","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8478,"byte_end":8531,"line_start":198,"line_end":198,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8726,"byte_end":8738,"line_start":204,"line_end":204,"column_start":11,"column_end":23},"name":"MaxNumDigits","qualname":"::MaxNumDigits","value":"MaxNumDigits","parent":null,"children":[{"krate":0,"index":28}],"decl_id":null,"docs":" A bounded integer, whose representation can overflow and therfore can only store a maximum\n number of digits\n","sig":null,"attributes":[{"value":"/ A bounded integer, whose representation can overflow and therfore can only store a maximum","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8600,"byte_end":8694,"line_start":202,"line_end":202,"column_start":1,"column_end":95}},{"value":"/ number of digits","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8695,"byte_end":8715,"line_start":203,"line_end":203,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8905,"byte_end":8919,"line_start":207,"line_end":207,"column_start":8,"column_end":22},"name":"max_num_digits","qualname":"::MaxNumDigits::max_num_digits","value":"pub fn max_num_digits(Self) -> usize","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Given a representation with a radix charactar I, what is the maximum number of digits we can\n parse without the integer overflowing for sure?\n","sig":null,"attributes":[{"value":"/ Given a representation with a radix charactar I, what is the maximum number of digits we can","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8745,"byte_end":8841,"line_start":205,"line_end":205,"column_start":5,"column_end":101}},{"value":"/ parse without the integer overflowing for sure?","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8846,"byte_end":8897,"line_start":206,"line_end":206,"column_start":5,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":9554,"byte_end":9568,"line_start":235,"line_end":235,"column_start":8,"column_end":22},"name":"ascii_to_digit","qualname":"::ascii_to_digit","value":"pub fn ascii_to_digit<I>(u8) -> Option<I> where I: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Converts an ascii character to digit","sig":null,"attributes":[{"value":"/ Converts an ascii character to digit","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":9340,"byte_end":9380,"line_start":226,"line_end":226,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":9381,"byte_end":9384,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":9385,"byte_end":9398,"line_start":228,"line_end":228,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":9399,"byte_end":9402,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":9403,"byte_end":9410,"line_start":230,"line_end":230,"column_start":1,"column_end":8}},{"value":"/ use atoi::ascii_to_digit;","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":9411,"byte_end":9440,"line_start":231,"line_end":231,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(Some(5), ascii_to_digit(b'5'));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":9441,"byte_end":9487,"line_start":232,"line_end":232,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(None, ascii_to_digit::<u32>(b'x'));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":9488,"byte_end":9538,"line_start":233,"line_end":233,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":9539,"byte_end":9546,"line_start":234,"line_end":234,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13427,"byte_end":13431,"line_start":367,"line_end":367,"column_start":5,"column_end":9},"name":"Plus","qualname":"::Sign::Plus","value":"Sign::Plus","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13437,"byte_end":13442,"line_start":368,"line_end":368,"column_start":5,"column_end":10},"name":"Minus","qualname":"::Sign::Minus","value":"Sign::Minus","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13416,"byte_end":13420,"line_start":366,"line_end":366,"column_start":10,"column_end":14},"name":"Sign","qualname":"::Sign","value":"pub enum Sign { Plus, Minus, }","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":61}],"decl_id":null,"docs":" Representation of a numerical sign\n","sig":null,"attributes":[{"value":"/ Representation of a numerical sign","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13323,"byte_end":13361,"line_start":364,"line_end":364,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13778,"byte_end":13786,"line_start":382,"line_end":382,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Sign>::try_from","value":"pub fn try_from(u8) -> Option<Sign>","parent":null,"children":[],"decl_id":null,"docs":" Trys to convert an ascii character into a `Sign`","sig":null,"attributes":[{"value":"/ Trys to convert an ascii character into a `Sign`","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13463,"byte_end":13515,"line_start":372,"line_end":372,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13520,"byte_end":13523,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13528,"byte_end":13541,"line_start":374,"line_end":374,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13546,"byte_end":13549,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13554,"byte_end":13561,"line_start":376,"line_end":376,"column_start":5,"column_end":12}},{"value":"/ use atoi::Sign;","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13566,"byte_end":13585,"line_start":377,"line_end":377,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(Some(Sign::Plus), Sign::try_from(b'+'));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13590,"byte_end":13645,"line_start":378,"line_end":378,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(Some(Sign::Minus), Sign::try_from(b'-'));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13650,"byte_end":13706,"line_start":379,"line_end":379,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(None, Sign::try_from(b'1'));","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13711,"byte_end":13754,"line_start":380,"line_end":380,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13759,"byte_end":13766,"line_start":381,"line_end":381,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":14000,"byte_end":14006,"line_start":391,"line_end":391,"column_start":12,"column_end":18},"name":"signum","qualname":"<Sign>::signum","value":"pub fn signum<I>(Self) -> I where I: Signed","parent":null,"children":[],"decl_id":null,"docs":" Returns either `+1` or `-1`\n","sig":null,"attributes":[{"value":"/ Returns either `+1` or `-1`","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13957,"byte_end":13988,"line_start":390,"line_end":390,"column_start":5,"column_end":36}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8971,"byte_end":8972,"line_start":210,"line_end":210,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":10001,"byte_end":10002,"line_start":254,"line_end":254,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":10497,"byte_end":10498,"line_start":274,"line_end":274,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":12020,"byte_end":12021,"line_start":322,"line_end":322,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":12519,"byte_end":12520,"line_start":342,"line_end":342,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13452,"byte_end":13456,"line_start":371,"line_end":371,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":2494,"byte_end":2499,"line_start":72,"line_end":72,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2086},"to":{"krate":0,"index":19}},{"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":3902,"byte_end":3913,"line_start":103,"line_end":103,"column_start":31,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":19},"to":{"krate":0,"index":21}},{"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":5557,"byte_end":5562,"line_start":136,"line_end":136,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2086},"to":{"krate":0,"index":23}},{"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":7058,"byte_end":7069,"line_start":169,"line_end":169,"column_start":31,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":23},"to":{"krate":0,"index":25}},{"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":8971,"byte_end":8972,"line_start":210,"line_end":210,"column_start":26,"column_end":27},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":30},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":10001,"byte_end":10002,"line_start":254,"line_end":254,"column_start":25,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":35},"to":{"krate":0,"index":19}},{"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":10497,"byte_end":10498,"line_start":274,"line_end":274,"column_start":32,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":38},"to":{"krate":0,"index":21}},{"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":12020,"byte_end":12021,"line_start":322,"line_end":322,"column_start":25,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":45},"to":{"krate":0,"index":23}},{"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":12519,"byte_end":12520,"line_start":342,"line_end":342,"column_start":32,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":48},"to":{"krate":0,"index":25}},{"span":{"file_name":"C:\\Users\\Michael Bao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atoi-0.3.2\\src\\lib.rs","byte_start":13452,"byte_end":13456,"line_start":371,"line_end":371,"column_start":6,"column_end":10},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":58},"to":{"krate":4294967295,"index":4294967295}}]}